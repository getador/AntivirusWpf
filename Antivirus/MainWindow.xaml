<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Antivirus"
        xmlns:ViewModeles="clr-namespace:Antivirus.ViewModeles"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        x:Class="Antivirus.MainWindow"
        mc:Ignorable="d"
        Title="Антивирус" Height="450" Width="800" WindowStartupLocation="CenterScreen" WindowStyle="None" ResizeMode="CanMinimize">
    <Window.Resources>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Canvas>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ellipse">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FFBD0000"/>
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="rectangle">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FFBD0000"/>
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="rectangle">
                                                <EasingColorKeyFrame KeyTime="0" Value="#FFBD0000"/>
                                            </ColorAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle1">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed"/>
                                    <VisualState x:Name="Disabled"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="rectangle1" Height="29" Width="30" Fill="#FFA2A2A2" Opacity="0" Stroke="#FFA2A2A2"/>
                            <Ellipse x:Name="ellipse" Width="15" VerticalAlignment="Top" Canvas.Top="7.133" StrokeThickness="2" Stroke="Black" Height="15" HorizontalAlignment="Left" RenderTransformOrigin="0.683,0.649" Canvas.Left="7.7">
                                <Ellipse.Fill>
                                    <ImageBrush Stretch="UniformToFill"/>
                                </Ellipse.Fill>
                            </Ellipse>
                            <Rectangle x:Name="rectangle" Width="2" VerticalAlignment="Top" Stroke="Black" Canvas.Left="14.1" Height="12.367" HorizontalAlignment="Center" Fill="Black" Canvas.Top="4.633"/>
                        </Canvas>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type CheckBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Canvas>
                            <Rectangle Width="14.4" VerticalAlignment="Top" Canvas.Top="4.4" Height="4.4" HorizontalAlignment="Left" Fill="Black">
                                <Rectangle.Stroke>
                                    <ImageBrush/>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Rectangle Width="14.4" VerticalAlignment="Top" Height="4.4" HorizontalAlignment="Left" Fill="Black">
                                <Rectangle.Stroke>
                                    <ImageBrush Stretch="None"/>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Rectangle Width="14.4" VerticalAlignment="Top" Canvas.Top="8.8" Height="4.4" HorizontalAlignment="Left" Fill="Black">
                                <Rectangle.Stroke>
                                    <ImageBrush/>
                                </Rectangle.Stroke>
                            </Rectangle>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MenuStatusStyle1" TargetType="{x:Type CheckBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Canvas>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed"/>
                                    <VisualState x:Name="Disabled"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="rectangle" Height="45" Width="46" Fill="#FFA2A2A2" Opacity="0">
                                <Rectangle.Stroke>
                                    <ImageBrush Stretch="None"/>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Rectangle Width="18.8" VerticalAlignment="Top" Canvas.Top="19.467" Height="5.866" HorizontalAlignment="Left" Fill="Black" Canvas.Left="13">
                                <Rectangle.Stroke>
                                    <ImageBrush/>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Rectangle Width="18.8" VerticalAlignment="Top" Height="5.867" HorizontalAlignment="Left" Fill="Black" Canvas.Left="13" Canvas.Top="13.6">
                                <Rectangle.Stroke>
                                    <ImageBrush Stretch="None"/>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Rectangle Width="18.8" VerticalAlignment="Top" Canvas.Top="25.333" Height="5.867" HorizontalAlignment="Left" Fill="Black" Canvas.Left="13">
                                <Rectangle.Stroke>
                                    <ImageBrush/>
                                </Rectangle.Stroke>
                            </Rectangle>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Storyboard x:Key="Storyboard1">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="stackPanel">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="2.566"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="stackPanel">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="36"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="checkBox">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="90"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Style x:Key="ButtonMinimulizerStyle1" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Canvas Margin="0,0.534,0,-0.532">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed"/>
                                    <VisualState x:Name="Disabled"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="rectangle" Height="28.798" Width="31" Fill="#FFA2A2A2" Opacity="0" Stroke="#FFA2A2A2"/>
                            <Rectangle Width="18" VerticalAlignment="Top" Canvas.Top="12.732" Stroke="Black" Canvas.Left="6.267" Height="3.667" HorizontalAlignment="Left" Fill="Black" RadiusY="0" RadiusX="0"/>
                        </Canvas>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="PanelMenu1" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Storyboard x:Key="Storyboard_Copy1">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="stackPanel">
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="stackPanel">
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="checkBox">
                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Style x:Key="ButtonStyle2" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border Background="#FFF64F4F"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonServerStyle" TargetType="{x:Type Button}"/>
        <Style x:Key="ButtonServerStyle1" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border Background="#FFA2A2A2"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Storyboard x:Key="SettingsCome">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="border">
                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="378.001"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Style x:Key="CheckBoxSettingsStatusStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                            <Border Background="#FFF64F4F"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CheckBoxServerStatusStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                            <Border Background="#FFA2A2A2"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Storyboard x:Key="SettingsOut">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="border">
                <SplineDoubleKeyFrame KeyTime="0:0:0.4" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Style x:Key="ButtonStyle3" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border>
                                <Grid>
                                    <Rectangle x:Name="rectangle1" Opacity="0" Fill="#FFA2A2A2">
                                        <Rectangle.Stroke>
                                            <ImageBrush/>
                                        </Rectangle.Stroke>
                                    </Rectangle>
                                    <Ellipse x:Name="ellipse" Width="15" VerticalAlignment="Top" StrokeThickness="2" Stroke="Black" RenderTransformOrigin="0.683,0.649" Margin="7.7,7.133,0,0" Height="15" HorizontalAlignment="Left">
                                        <Ellipse.Fill>
                                            <ImageBrush Stretch="UniformToFill"/>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                    <Rectangle x:Name="rectangle" Width="2" VerticalAlignment="Top" Stroke="Black" Margin="14.1,4.633,13.9,0" Height="12.367" HorizontalAlignment="Center" Fill="Black"/>
                                </Grid>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonVirusMenuStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border BorderBrush="#FFEA0000" BorderThickness="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonExceptionMenuStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border BorderBrush="Black" BorderThickness="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonDengerMenuStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border BorderBrush="Black" BorderThickness="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsPressed" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.Triggers>
        <EventTrigger RoutedEvent="ToggleButton.Checked" SourceName="checkBox">
            <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
        </EventTrigger>
        <EventTrigger RoutedEvent="ToggleButton.Unchecked" SourceName="checkBox">
            <BeginStoryboard x:Name="Storyboard_Copy1_BeginStoryboard" Storyboard="{StaticResource Storyboard_Copy1}"/>
        </EventTrigger>
        <EventTrigger RoutedEvent="ToggleButton.Checked" SourceName="checkBox1">
            <BeginStoryboard x:Name="SettingsCome_BeginStoryboard" Storyboard="{StaticResource SettingsCome}"/>
        </EventTrigger>
        <EventTrigger RoutedEvent="ToggleButton.Unchecked" SourceName="checkBox1">
            <BeginStoryboard x:Name="SettingsOut_BeginStoryboard" Storyboard="{StaticResource SettingsOut}"/>
        </EventTrigger>
    </Window.Triggers>
    <Window.DataContext>
        <ViewModeles:ViewWorker/>
    </Window.DataContext>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="23*"/>
            <ColumnDefinition Width="377*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" MinHeight="28.8"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Border BorderThickness="1" HorizontalAlignment="Left" Height="29" VerticalAlignment="Top" Width="754" Grid.RowSpan="2" MouseLeftButtonDown="Border_MouseLeftButtonDown" Grid.Column="1">
            <Border.BorderBrush>
                <ImageBrush/>
            </Border.BorderBrush>
            <Border.Background>
                <ImageBrush/>
            </Border.Background>
        </Border>
        <StackPanel x:Name="stackPanel" Background="#FF73DCD2" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5" Grid.RowSpan="2">
            <StackPanel.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </StackPanel.RenderTransform>
        </StackPanel>
        <StackPanel Orientation="Vertical" Background="#FF73DCD2" Height="29" VerticalAlignment="Top" Grid.RowSpan="2" Margin="0,0,0.4,0"/>
        <CheckBox x:Name="checkBox" IsChecked="False" Content="CheckBox" Margin="-0.4,0.2,0,0" Grid.Row="1" Style="{DynamicResource MenuStatusStyle1}" HorizontalAlignment="Left" Width="46" Height="45" VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5">
            <CheckBox.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </CheckBox.RenderTransform>
        </CheckBox>
        <Button x:Name="button1" Content="Button" Style="{DynamicResource ButtonStyle1}"  Command="{Binding Exit_Click}" HorizontalAlignment="Right" Width="29" Grid.Column="1"/>
        <Button x:Name="button" Command="{Binding Minimalize_Window}" Grid.Column="1" Margin="694.001,0,29.4,0" Style="{DynamicResource ButtonMinimulizerStyle1}"/>
        <CheckBox x:Name="checkBox1" Content="CheckBox" Margin="0,0,23.2,0" Style="{DynamicResource CheckBoxSettingsStatusStyle}"/>
        <CheckBox Content="CheckBox" Margin="22.8,0,0,0" Style="{DynamicResource CheckBoxServerStatusStyle}"/>
        <Border x:Name="border" BorderThickness="1" HorizontalAlignment="Left" Height="349.6" Margin="0,-349.2,0,0" VerticalAlignment="Top" Width="800" Grid.ColumnSpan="2" Background="#FFD4C8C8" RenderTransformOrigin="0.5,0.5" BorderBrush="#FFD4C8C8">
            <Border.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </Border.RenderTransform>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="46*"/>
                    <ColumnDefinition Width="353*"/>
                </Grid.ColumnDefinitions>
                <Border BorderBrush="Black" BorderThickness="1" HorizontalAlignment="Left" Height="156" Margin="10,10,0,0" VerticalAlignment="Top" Width="220.8" Grid.ColumnSpan="2"/>
                <TextBlock Height="22" Margin="19,32,10,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="auto" Text="{Binding SettingsLanguageText}" FontSize="16"/>
                <ComboBox ItemsSource="{Binding ItemsFile}" SelectedIndex="{Binding IndexLangItem}" Grid.Column="1" HorizontalAlignment="Left" Margin="18,32,0,0" VerticalAlignment="Top" Width="99"/>
            </Grid>
        </Border>
        <Button Content="Button" HorizontalAlignment="Left" Height="46" Margin="-0.4,111,0,0" Grid.Row="1" Style="{DynamicResource ButtonVirusMenuStyle}" VerticalAlignment="Top" Width="46"/>
        <Button Content="Button" HorizontalAlignment="Left" Height="45" Margin="0,188.8,0,0" Grid.Row="1" Style="{DynamicResource ButtonExceptionMenuStyle}" VerticalAlignment="Top" Width="46"/>
        <Button Content="Button" HorizontalAlignment="Left" Height="46" Margin="-0.4,271.2,0,0" Grid.Row="1" Style="{DynamicResource ButtonDengerMenuStyle}" VerticalAlignment="Top" Width="46"/>
    </Grid>
</Window>
